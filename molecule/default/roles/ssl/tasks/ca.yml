---
- name: Verify SSL CA private key file attributes
  block:
    - name: Stat SSL CA private key file
      ansible.builtin.stat:
        path: "{{ ssl_keys_ca_path }}"
      register: ssl_ca_key_stat

    - name: Assert SSL CA private key file exists
      ansible.builtin.assert:
        that: ssl_ca_key_stat.stat.exists
        fail_msg: "SSL CA private key does not exist at {{ ssl_keys_ca_path }}"
        success_msg: "SSL CA private key exists at {{ ssl_keys_ca_path }}"

    - name: Assert SSL CA private key is a regular file
      ansible.builtin.assert:
        that: ssl_ca_key_stat.stat.isreg
        fail_msg: "{{ ssl_keys_ca_path }} is not a regular file"
        success_msg: "{{ ssl_keys_ca_path }} is a regular file"

    - name: Assert SSL CA private key mode
      ansible.builtin.assert:
        that: ssl_ca_key_stat.stat.mode == '0600'
        fail_msg: "SSL CA private key has incorrect mode: {{ ssl_ca_key_stat.stat.mode }}"
        success_msg: "SSL CA private key has correct mode"

    - name: Assert SSL CA private key ownership
      ansible.builtin.assert:
        that:
          - ssl_ca_key_stat.stat.pw_name == 'root'
          - ssl_ca_key_stat.stat.gr_name == 'root'
        fail_msg: "SSL CA private key has incorrect ownership: {{ ssl_ca_key_stat.stat.pw_name }}:{{ ssl_ca_key_stat.stat.gr_name }}"
        success_msg: "SSL CA private key has correct ownership"

- name: Verify SSL CA certificate file attributes
  block:
    - name: Stat SSL CA certificate file
      ansible.builtin.stat:
        path: "{{ ssl_certs_ca_path }}"
      register: ssl_ca_cert_stat

    - name: Assert SSL CA certificate file exists
      ansible.builtin.assert:
        that: ssl_ca_cert_stat.stat.exists
        fail_msg: "SSL CA certificate does not exist at {{ ssl_certs_ca_path }}"
        success_msg: "SSL CA certificate exists at {{ ssl_certs_ca_path }}"

    - name: Assert SSL CA certificate is a regular file
      ansible.builtin.assert:
        that: ssl_ca_cert_stat.stat.isreg
        fail_msg: "{{ ssl_certs_ca_path }} is not a regular file"
        success_msg: "{{ ssl_certs_ca_path }} is a regular file"

    - name: Assert SSL CA certificate mode
      ansible.builtin.assert:
        that: ssl_ca_cert_stat.stat.mode == '0644'
        fail_msg: "SSL CA certificate has incorrect mode: {{ ssl_ca_cert_stat.stat.mode }}"
        success_msg: "SSL CA certificate has correct mode"

    - name: Assert SSL CA certificate ownership
      ansible.builtin.assert:
        that:
          - ssl_ca_cert_stat.stat.pw_name == 'root'
          - ssl_ca_cert_stat.stat.gr_name == 'root'
        fail_msg: "SSL CA certificate has incorrect ownership: {{ ssl_ca_cert_stat.stat.pw_name }}:{{ ssl_ca_cert_stat.stat.gr_name }}"
        success_msg: "SSL CA certificate has correct ownership"

- name: Verify SSL CA certificate content
  block:
    - name: Get SSL CA certificate information
      ansible.builtin.command: openssl x509 -in "{{ ssl_certs_ca_path }}" -text -noout
      register: ssl_ca_cert_info
      changed_when: false

    - name: Assert SSL CA certificate subject contains domain
      ansible.builtin.assert:
        that: "ssl_ca_cert_info.stdout is search('CN *= *{{ ssl_domain | regex_escape }}')"
        fail_msg: "SSL CA certificate subject does not contain expected domain"
        success_msg: "SSL CA certificate subject contains expected domain"

    - name: Assert SSL CA certificate is a CA certificate
      ansible.builtin.assert:
        that: "'CA:TRUE' in ssl_ca_cert_info.stdout"
        fail_msg: "SSL CA certificate does not have CA:TRUE constraint"
        success_msg: "SSL CA certificate has CA:TRUE constraint"

    - name: Assert SSL CA certificate has basic constraints
      ansible.builtin.assert:
        that: "'Basic Constraints' in ssl_ca_cert_info.stdout"
        fail_msg: "SSL CA certificate does not have Basic Constraints extension"
        success_msg: "SSL CA certificate has Basic Constraints extension"

    - name: Get SSL CA certificate validity
      ansible.builtin.command: openssl x509 -in "{{ ssl_certs_ca_path }}" -checkend 86400
      register: ssl_ca_cert_validity
      changed_when: false

    - name: Assert SSL CA certificate is valid
      ansible.builtin.assert:
        that: ssl_ca_cert_validity.rc == 0
        fail_msg: "SSL CA certificate is not valid or will expire within 24 hours"
        success_msg: "SSL CA certificate is valid"

- name: Verify SSL CA certificate is in trust store
  block:
    - name: Check CA certificate is in trust store bundle
      ansible.builtin.command: "openssl verify -CAfile {{ ssl_certs_ca_truststore_bundle }} {{ ssl_certs_ca_path }}"
      register: ssl_ca_bundle_check
      changed_when: false

    - name: Assert CA certificate is available in trust store
      ansible.builtin.assert:
        that: "'OK' in ssl_ca_bundle_check.stdout"
        fail_msg: "CA certificate is not available in system trust store"
        success_msg: "CA certificate is available in system trust store"
