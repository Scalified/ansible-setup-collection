---
- name: Verify NUT CGI configuration file attributes
  block:
    - name: Stat NUT hosts configuration file
      ansible.builtin.stat:
        path: "{{ nut_dir }}/hosts.conf"
      register: hosts_conf_stat

    - name: Assert NUT hosts configuration file exists
      ansible.builtin.assert:
        that: hosts_conf_stat.stat.exists
        fail_msg: "NUT hosts configuration file does not exist"
        success_msg: "NUT hosts configuration file exists"

    - name: Assert NUT hosts configuration file is a regular file
      ansible.builtin.assert:
        that: hosts_conf_stat.stat.isreg
        fail_msg: "NUT hosts configuration file is not a regular file"
        success_msg: "NUT hosts configuration file is a regular file"

    - name: Assert NUT hosts configuration file mode
      ansible.builtin.assert:
        that: hosts_conf_stat.stat.mode == '0640'
        fail_msg: "NUT hosts configuration file has incorrect mode: {{ hosts_conf_stat.stat.mode }}"
        success_msg: "NUT hosts configuration file has correct mode"

    - name: Assert NUT hosts configuration file ownership
      ansible.builtin.assert:
        that:
          - hosts_conf_stat.stat.pw_name == 'root'
          - hosts_conf_stat.stat.gr_name == 'nut'
        fail_msg: "NUT hosts configuration file has incorrect ownership: {{ hosts_conf_stat.stat.pw_name }}:{{ hosts_conf_stat.stat.gr_name }}"
        success_msg: "NUT hosts configuration file has correct ownership"

- name: Verify NUT upsset configuration file attributes
  block:
    - name: Stat NUT upsset configuration file
      ansible.builtin.stat:
        path: "{{ nut_dir }}/upsset.conf"
      register: upsset_conf_stat

    - name: Assert NUT upsset configuration file exists
      ansible.builtin.assert:
        that: upsset_conf_stat.stat.exists
        fail_msg: "NUT upsset configuration file does not exist"
        success_msg: "NUT upsset configuration file exists"

    - name: Assert NUT upsset configuration file is a regular file
      ansible.builtin.assert:
        that: upsset_conf_stat.stat.isreg
        fail_msg: "NUT upsset configuration file is not a regular file"
        success_msg: "NUT upsset configuration file is a regular file"

    - name: Assert NUT upsset configuration file mode
      ansible.builtin.assert:
        that: upsset_conf_stat.stat.mode == '0640'
        fail_msg: "NUT upsset configuration file has incorrect mode: {{ upsset_conf_stat.stat.mode }}"
        success_msg: "NUT upsset configuration file has correct mode"

    - name: Assert NUT upsset configuration file ownership
      ansible.builtin.assert:
        that:
          - upsset_conf_stat.stat.pw_name == 'root'
          - upsset_conf_stat.stat.gr_name == 'nut'
        fail_msg: "NUT upsset configuration file has incorrect ownership: {{ upsset_conf_stat.stat.pw_name }}:{{ upsset_conf_stat.stat.gr_name }}"
        success_msg: "NUT upsset configuration file has correct ownership"

- name: Verify NUT CGI configuration file content
  block:
    - name: Slurp NUT hosts configuration file content
      ansible.builtin.slurp:
        src: "{{ nut_dir }}/hosts.conf"
      register: hosts_conf_content

    - name: Assert NUT hosts configuration file has Unix line endings
      ansible.builtin.assert:
        that: "'\\r\\n' not in (hosts_conf_content.content | b64decode)"
        fail_msg: "NUT hosts configuration file contains Windows line endings (CRLF)"
        success_msg: "NUT hosts configuration file has Unix line endings (LF)"

    - name: Assert hosts configuration contains MONITOR directive
      ansible.builtin.assert:
        that: "'MONITOR {{ nut_ups_name }}@localhost \"{{ nut_ups_name | upper }}\"' in (hosts_conf_content.content | b64decode)"
        fail_msg: "Hosts configuration does not contain MONITOR directive"
        success_msg: "Hosts configuration contains MONITOR directive"

    - name: Slurp NUT upsset configuration file content
      ansible.builtin.slurp:
        src: "{{ nut_dir }}/upsset.conf"
      register: upsset_conf_content

    - name: Assert NUT upsset configuration file has Unix line endings
      ansible.builtin.assert:
        that: "'\\r\\n' not in (upsset_conf_content.content | b64decode)"
        fail_msg: "NUT upsset configuration file contains Windows line endings (CRLF)"
        success_msg: "NUT upsset configuration file has Unix line endings (LF)"

    - name: Assert upsset configuration contains I_HAVE_SECURED_MY_CGI directive
      ansible.builtin.assert:
        that: "'I_HAVE_SECURED_MY_CGI' in (upsset_conf_content.content | b64decode)"
        fail_msg: "Upsset configuration does not contain I_HAVE_SECURED_MY_CGI directive"
        success_msg: "Upsset configuration contains I_HAVE_SECURED_MY_CGI directive"

- name: Include distribution-specific verification tests
  ansible.builtin.include_tasks: "{{ system_os_family }}/cgi.yml"
