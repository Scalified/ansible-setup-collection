---
- name: Verify NUT UPS configuration file attributes
  block:
    - name: Stat NUT UPS configuration file
      ansible.builtin.stat:
        path: "{{ nut_dir }}/ups.conf"
      register: ups_conf_stat
      become: true

    - name: Assert NUT UPS configuration file exists
      ansible.builtin.assert:
        that: ups_conf_stat.stat.exists
        fail_msg: "NUT UPS configuration file does not exist"
        success_msg: "NUT UPS configuration file exists"

    - name: Assert NUT UPS configuration file is a regular file
      ansible.builtin.assert:
        that: ups_conf_stat.stat.isreg
        fail_msg: "NUT UPS configuration file is not a regular file"
        success_msg: "NUT UPS configuration file is a regular file"

    - name: Assert NUT UPS configuration file mode
      ansible.builtin.assert:
        that: ups_conf_stat.stat.mode == '0640'
        fail_msg: "NUT UPS configuration file has incorrect mode: {{ ups_conf_stat.stat.mode }}"
        success_msg: "NUT UPS configuration file has correct mode"

    - name: Assert NUT UPS configuration file ownership
      ansible.builtin.assert:
        that:
          - ups_conf_stat.stat.pw_name == 'root'
          - ups_conf_stat.stat.gr_name == 'nut'
        fail_msg: "NUT UPS configuration file has incorrect ownership: {{ ups_conf_stat.stat.pw_name }}:{{ ups_conf_stat.stat.gr_name }}"
        success_msg: "NUT UPS configuration file has correct ownership"

- name: Verify NUT UPS configuration file content
  block:
    - name: Slurp NUT UPS configuration file content
      ansible.builtin.slurp:
        src: "{{ nut_dir }}/ups.conf"
      register: ups_conf_content

    - name: Assert NUT UPS configuration file has Unix line endings
      ansible.builtin.assert:
        that: "'\\r\\n' not in (ups_conf_content.content | b64decode)"
        fail_msg: "NUT UPS configuration file contains Windows line endings (CRLF)"
        success_msg: "NUT UPS configuration file has Unix line endings (LF)"

    - name: Assert UPS configuration contains defined UPS name
      ansible.builtin.assert:
        that: "'[{{ nut_ups_name }}]' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain UPS name: {{ nut_ups_name }}"
        success_msg: "UPS configuration contains UPS name: {{ nut_ups_name }}"

    - name: Assert UPS configuration contains driver
      ansible.builtin.assert:
        that: "'driver    = \"{{ nut_ups_config.driver }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain driver: {{ nut_ups_config.driver }}"
        success_msg: "UPS configuration contains driver: {{ nut_ups_config.driver }}"

    - name: Assert UPS configuration contains port
      ansible.builtin.assert:
        that: "'port      = \"{{ nut_ups_config.port }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain port: {{ nut_ups_config.port }}"
        success_msg: "UPS configuration contains port: {{ nut_ups_config.port }}"

    - name: Assert UPS configuration contains vendor
      ansible.builtin.assert:
        that: "'vendor    = \"{{ nut_ups_config.vendor }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain vendor: {{ nut_ups_config.vendor }}"
        success_msg: "UPS configuration contains vendor: {{ nut_ups_config.vendor }}"

    - name: Assert UPS configuration contains vendorid
      ansible.builtin.assert:
        that: "'vendorid  = \"{{ nut_ups_config.vendorid }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain vendorid: {{ nut_ups_config.vendorid }}"
        success_msg: "UPS configuration contains vendorid: {{ nut_ups_config.vendorid }}"

    - name: Assert UPS configuration contains product
      ansible.builtin.assert:
        that: "'product   = \"{{ nut_ups_config.product }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain product: {{ nut_ups_config.product }}"
        success_msg: "UPS configuration contains product: {{ nut_ups_config.product }}"

    - name: Assert UPS configuration contains productid
      ansible.builtin.assert:
        that: "'productid = \"{{ nut_ups_config.productid }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain productid: {{ nut_ups_config.productid }}"
        success_msg: "UPS configuration contains productid: {{ nut_ups_config.productid }}"

    - name: Assert UPS configuration contains serial
      ansible.builtin.assert:
        that: "'serial    = \"{{ nut_ups_config.serial }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain serial: {{ nut_ups_config.serial }}"
        success_msg: "UPS configuration contains serial: {{ nut_ups_config.serial }}"

    - name: Assert UPS configuration contains bus
      ansible.builtin.assert:
        that: "'bus       = \"{{ nut_ups_config.bus }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain bus: {{ nut_ups_config.bus }}"
        success_msg: "UPS configuration contains bus: {{ nut_ups_config.bus }}"

    - name: Assert UPS configuration contains extra properties
      ansible.builtin.assert:
        that: "'extra     = \"{{ nut_ups_config_extra.extra }}\"' in (ups_conf_content.content | b64decode)"
        fail_msg: "UPS configuration does not contain extra: {{ nut_ups_config_extra.extra }}"
        success_msg: "UPS configuration contains extra: {{ nut_ups_config_extra.extra }}"
